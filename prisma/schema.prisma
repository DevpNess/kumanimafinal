generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  //----------- GENERAL -----------
  id             String          @id @default(cuid())
  avatar         String?
  name           String
  lastName       String
  nickName       String          @unique
  email          String          @unique
  emailVerified  DateTime?
  password       String
  //----------- MANGA -----------
  likesManga     MangaLike[]
  seeLaterManga  MangaSeeLater[]
  favoritesManga MangaFavorite[]

  accounts      Account[]
  sessions      Sesion[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  ratings       RatingManga[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // =============================
  // MÉTRICAS Y ANALÍTICA AVANZADA
  // =============================

  /// Sesiones de usuario (tráfico)
  sesiones      Sesion[]
  /// Páginas vistas (tráfico)
  paginasVista  PaginaVista[]
  /// Eventos personalizados (engagement, interacción)
  eventos       Evento[]
  /// Errores técnicos (métricas técnicas)
  erroresTecnicos ErrorTecnico[]
  /// Tiempos de carga de página (métricas técnicas)
  tiemposCarga  TiempoCarga[]
  /// Vistas de manga (contenido)
  mangaViews    MangaView[]
  /// Ratings de manga (contenido, engagement)
  mangaRatings  MangaRating[]
  /// Comentarios de manga (contenido, engagement)
  mangaComentarios MangaComentario[]
  /// Favoritos de manga (engagement, muchos a muchos)
  mangaFavoritos MangaFavorito[]
  /// Compartidos de manga (engagement, muchos a muchos)
  mangaCompartidos MangaCompartido[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Manga {
  id             Int             @id @unique @default(autoincrement())
  path           String          @unique
  cap            Int             @default(0)
  title          String          @unique
  description    String
  statusId       Int
    statusManga StatusManga  @relation(fields: [statusId], references: [id])
  typeId         Int
  typeManga   TypeManga    @relation(fields: [typeId], references: [id])
  authorId       Int
  
  authorManga AuthorManga  @relation(fields: [authorId], references: [id])
  scan           Int
  
  scanManga   ScanManga    @relation(fields: [scan], references: [id])
  genres      GenreManga[]
  banner         String?
  views          Int             @default(0)
  dayViews       Int             @default(0)
  weekViews      Int             @default(0)
  monthViews     Int             @default(0)
  likes          MangaLike[]
  likesCount     Int             @default(0)
  favorites      MangaFavorite[]
  favoritesCount Int             @default(0)
  seeLater       MangaSeeLater[]
  seeLaterCount  Int             @default(0)
  ratings        RatingManga[]
  releaseDate    DateTime        @default(now())
  updateLast     DateTime        @updatedAt
  updateNext     DateTime?

  // =============================
  // MÉTRICAS Y ANALÍTICA AVANZADA
  // =============================

  /// Vistas de manga (contenido)
  mangaViews    MangaView[]
  /// Ratings de manga (contenido, engagement)
  mangaRatings  MangaRating[]
  /// Comentarios de manga (contenido, engagement)
  mangaComentarios MangaComentario[]
  /// Favoritos de manga (engagement, muchos a muchos)
  mangaFavoritos MangaFavorito[]
  /// Compartidos de manga (engagement, muchos a muchos)
  mangaCompartidos MangaCompartido[]
}

model StatusManga {
  id     Int     @id @unique @default(autoincrement())
  name   String  @unique
  mangas Manga[]
}

model TypeManga {
  id     Int     @id @unique @default(autoincrement())
  name   String  @unique
  mangas Manga[]
}

model AuthorManga {
  id     Int     @id @unique @default(autoincrement())
  name   String  @unique
  mangas Manga[]
}

model ScanManga {
  id     Int     @id @unique @default(autoincrement())
  name   String  @unique
  mangas Manga[]
}

model Genre {
  id     Int          @id @default(autoincrement())
  name   String       @unique
  mangas GenreManga[]
}

model GenreManga {
  manga   Manga @relation(fields: [mangaId], references: [id])
  mangaId Int
  genre   Genre @relation(fields: [genreId], references: [id])
  genreId Int

  @@id([mangaId, genreId])
}

model RatingManga {
  id      Int    @id @default(autoincrement())
  userId  String
  mangaId Int
  score   Int    @default(0)
  user    User   @relation(fields: [userId], references: [id])
  manga   Manga  @relation(fields: [mangaId], references: [id])

  @@unique([userId, mangaId])
}

model MangaLike {
  id      Int    @id @default(autoincrement())
  userId  String
  mangaId Int
  user    User   @relation(fields: [userId], references: [id])
  manga   Manga  @relation(fields: [mangaId], references: [id])

  @@unique([userId, mangaId])
}

model MangaSeeLater {
  id      Int    @id @default(autoincrement())
  userId  String
  mangaId Int
  user    User   @relation(fields: [userId], references: [id])
  manga   Manga  @relation(fields: [mangaId], references: [id])

  @@unique([userId, mangaId])
}

model MangaFavorite {
  id      Int    @id @default(autoincrement())
  userId  String
  mangaId Int
  user    User   @relation(fields: [userId], references: [id])
  manga   Manga  @relation(fields: [mangaId], references: [id])

  @@unique([userId, mangaId])
}

// model Anime {
//   id           Int             @id @unique @default(autoincrement())
//   title        String          @unique
//   description  String
//   episodes     Int             @default(0)
//   pathEpisodes String
//   statusR      StatusAnime     @relation(fields: [statusId], references: [id])
//   statusId     Int
//   typeR        TypeAnime       @relation(fields: [typeId], references: [id])
//   typeId       Int
//   studio       Studio          @relation(fields: [studioId], references: [id])
//   studioId     Int
//   genres       GenresOnAnime[]
//   banner       String
//   views        Int             @default(0)
//   dayViews     Int             @default(0)
//   weekViews    Int             @default(0)
//   monthViews   Int             @default(0)
//   likes        Int             @default(0)
//   favorite     Int //convertir en model
//   seeLater     Int             @default(0)
//   rating       Int             @default(0)
//   ranking      Int //convertir en model
//   releaseDate  DateTime        @default(now())
//   updateLast   DateTime
//   updateNext   DateTime
// }
//----------------------------------------------------------------\
// WEB SCRAPING
//----------------------------------------------------------------
model MangaScraping {
  id                     Int    @id @unique @default(autoincrement())
  name                   String @unique
  domain                 String @unique
  SelectorName           String
  SelectorDescription    String
  SelectorStatus         String
  SelectorType           String
  SelectorAuthor         String
  SelectorScan           String
  SelectorGenres         String
  SelectorBanner         String
  SelectorNumberChapters String
  SelectorImageChapter   String
}

model PageStats {
  id         Int      @id @default(autoincrement())
  date       DateTime @unique
  totalRevenue   Float
  newCustomers  Int
  activeAccounts Int
  growthRate    Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

/// Sesiones de usuario (tráfico)
model Sesion {
  id           Int      @id @default(autoincrement())
  usuario      User?    @relation(fields: [usuarioId], references: [id])
  usuarioId    String?
  ip           String
  userAgent    String
  inicio       DateTime @default(now())
  fin          DateTime?
  paginas      PaginaVista[]
  // Campos de Session de NextAuth
  sessionToken String?   @unique
  expires      DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

/// Páginas vistas (tráfico)
model PaginaVista {
  id         Int      @id @default(autoincrement())
  sesion     Sesion   @relation(fields: [sesionId], references: [id])
  sesionId   Int
  url        String
  referrer   String?
  timestamp  DateTime @default(now())
  eventos    Evento[]
  // Relación con usuario
  usuario    User?    @relation(fields: [usuarioId], references: [id])
  usuarioId  String?
}

/// Eventos personalizados (engagement, interacción)
model Evento {
  id            Int         @id @default(autoincrement())
  paginaVista   PaginaVista @relation(fields: [paginaVistaId], references: [id])
  paginaVistaId Int
  tipo          String      // ejemplo: 'click', 'scroll', 'compartir', etc.
  descripcion   String?
  timestamp     DateTime    @default(now())
  // Relación con usuario
  usuario    User?    @relation(fields: [usuarioId], references: [id])
  usuarioId  String?
}

/// Errores técnicos (métricas técnicas)
model ErrorTecnico {
  id         Int      @id @default(autoincrement())
  usuario    User?    @relation(fields: [usuarioId], references: [id])
  usuarioId  String?
  mensaje    String
  url        String?
  stack      String?
  timestamp  DateTime @default(now())
}

/// Tiempos de carga de página (métricas técnicas)
model TiempoCarga {
  id         Int      @id @default(autoincrement())
  url        String
  duracionMs Int
  usuario    User?    @relation(fields: [usuarioId], references: [id])
  usuarioId  String?
  timestamp  DateTime @default(now())
}

/// Vistas de manga (contenido)
model MangaView {
  id         Int      @id @default(autoincrement())
  manga      Manga    @relation(fields: [mangaId], references: [id])
  mangaId    Int
  usuario    User?    @relation(fields: [usuarioId], references: [id])
  usuarioId  String?
  timestamp  DateTime @default(now())
}

/// Ratings de manga (contenido, engagement)
model MangaRating {
  id         Int      @id @default(autoincrement())
  manga      Manga    @relation(fields: [mangaId], references: [id])
  mangaId    Int
  usuario    User     @relation(fields: [usuarioId], references: [id])
  usuarioId  String
  puntuacion Int      // 1-5 estrellas
  timestamp  DateTime @default(now())

  @@unique([mangaId, usuarioId])
}

/// Comentarios de manga (contenido, engagement)
model MangaComentario {
  id         Int      @id @default(autoincrement())
  manga      Manga    @relation(fields: [mangaId], references: [id])
  mangaId    Int
  usuario    User     @relation(fields: [usuarioId], references: [id])
  usuarioId  String
  comentario String
  timestamp  DateTime @default(now())
}

/// Favoritos de manga (engagement, muchos a muchos)
model MangaFavorito {
  id         Int      @id @default(autoincrement())
  manga      Manga    @relation(fields: [mangaId], references: [id])
  mangaId    Int
  usuario    User     @relation(fields: [usuarioId], references: [id])
  usuarioId  String
  timestamp  DateTime @default(now())

  @@unique([mangaId, usuarioId])
}

/// Compartidos de manga (engagement, muchos a muchos)
model MangaCompartido {
  id         Int      @id @default(autoincrement())
  manga      Manga    @relation(fields: [mangaId], references: [id])
  mangaId    Int
  usuario    User     @relation(fields: [usuarioId], references: [id])
  usuarioId  String
  plataforma String   // ejemplo: 'twitter', 'facebook', 'whatsapp', etc.
  timestamp  DateTime @default(now())
}
