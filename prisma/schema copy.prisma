generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  //----------- GENERAL -----------
  id             String          @id @default(cuid())
  avatar         String?
  name           String
  lastName       String
  nickName       String          @unique
  email          String          @unique
  emailVerified  DateTime?
  password       String
  //----------- MANGA -----------
  likesManga     Int?
  seeLaterManga  Int?
  favoritesManga Int?
  //----------- ANIME -----------
  likesAnime     Int?
  seeLaterAnime  Int?
  favoritesAnime Int?
  accounts       Account[]
  sessions       Session[]
  // Optional for WebAuthn support
  Authenticator  Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model KumanimaEs {
  //----------- GENERAL -----------
  id          Int    @id @unique @default(autoincrement())
  title       String @unique
  description String
  logo        String
  logoLetters String
  notice      String
  alert       String
  //MainNav     Json?
  paypal      String
  discord     String
  facebook    String
  instagram   String
  tiktok      String
}

model KumanimaEn {
  //----------- GENERAL -----------
  id          Int    @id @unique @default(autoincrement())
  title       String @unique
  description String
  logo        String
  logoLetters String
  notice      String
  alert       String
  //MainNav     Json?
  paypal      String
  discord     String
  facebook    String
  instagram   String
  tiktok      String
}

model Manga {
  id           Int             @id @unique @default(autoincrement())
  title        String          @unique
  description  String
  chapters     Int             @default(0)
  pathChapters String
  statusR      StatusManga     @relation(fields: [statusId], references: [id])
  statusId     Int
  type         TypeManga       @relation(fields: [typeId], references: [id])
  typeId       Int
  author       Author          @relation(fields: [authorId], references: [id])
  authorId     Int
  scan         Int //convertir en model
  genres       GenresOnManga[]
  banner       String
  views        Int             @default(0) //convertir en model
  dayViews     Int             @default(0) //convertir en model
  weekViews    Int             @default(0) //convertir en model
  monthViews   Int             @default(0) //convertir en model
  likes        Int             @default(0) //convertir en model
  favorite     Int //convertir en model
  seeLater     Int             @default(0) //convertir en model
  rating       Int             @default(0) //convertir en model
  ranking      Int //convertir en model
  releaseDate  DateTime        @default(now())
  updateLast   DateTime
  updateNext   DateTime
}

model Author {
  id    Int     @id
  name  String  @unique
  manga Manga[]
}

model Anime {
  id           Int             @id @unique @default(autoincrement())
  title        String          @unique
  description  String
  episodes     Int             @default(0)
  pathEpisodes String
  statusR      StatusAnime     @relation(fields: [statusId], references: [id])
  statusId     Int
  typeR        TypeAnime       @relation(fields: [typeId], references: [id])
  typeId       Int
  studio       Studio          @relation(fields: [studioId], references: [id])
  studioId     Int
  genres       GenresOnAnime[]
  banner       String
  views        Int             @default(0)
  dayViews     Int             @default(0)
  weekViews    Int             @default(0)
  monthViews   Int             @default(0)
  likes        Int             @default(0)
  favorite     Int //convertir en model
  seeLater     Int             @default(0)
  rating       Int             @default(0)
  ranking      Int //convertir en model
  releaseDate  DateTime        @default(now())
  updateLast   DateTime
  updateNext   DateTime
}

model StatusManga {
  id    Int     @id @unique @default(autoincrement())
  text  String  @unique
  Manga Manga[]
}

model StatusAnime {
  id   Int    @id @unique @default(autoincrement())
  text String @unique

  Anime Anime[]
}

model TypeAnime {
  id    Int     @id @unique @default(autoincrement())
  text  String  @unique
  anime Anime[]
}

model TypeManga {
  id    Int     @id @unique @default(autoincrement())
  text  String  @unique
  manga Manga[]
}

//agregar mas 18
model GenresManga {
  id     Int             @id @default(autoincrement())
  name   String          @unique
  mangas GenresOnManga[]
}

model GenresAnime {
  id    Int             @id @default(autoincrement())
  name  String          @unique
  anime GenresOnAnime[]
}

model GenresOnAnime {
  anime   Anime       @relation(fields: [animeId], references: [id])
  animeId Int
  genre   GenresAnime @relation(fields: [genreId], references: [id])
  genreId Int

  @@id([animeId, genreId])
}

model GenresOnManga {
  manga   Manga       @relation(fields: [mangaId], references: [id])
  mangaId Int
  genre   GenresManga @relation(fields: [genreId], references: [id])
  genreId Int

  @@id([mangaId, genreId])
}

model dayViews {
  id       Int @id @unique @default(autoincrement())
  serie    Int
  position Int
}

model weekViews {
  id       Int @id @unique @default(autoincrement())
  serie    Int
  position Int
}

model monthViews {
  id       Int @id @unique @default(autoincrement())
  serie    Int
  position Int
}

model TotalTopViews {
  id       Int @id @unique @default(autoincrement())
  serie    Int
  position Int
}

model Studio {
  id    Int     @id @unique @default(autoincrement())
  text  String
  Anime Anime[]
}

model Rating {
  id      Int @id @default(autoincrement())
  mangaId Int
  rating1 Int @default(0)
  rating2 Int @default(0)
  rating3 Int @default(0)
  rating4 Int @default(0)
  rating5 Int @default(0)
}

model Ranting {
  id Int @id @unique @default(autoincrement())
}
